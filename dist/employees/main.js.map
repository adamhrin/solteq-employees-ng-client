{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/add-employee/add-employee.component.html","webpack:///./src/app/add-employee/add-employee.component.scss","webpack:///./src/app/add-employee/add-employee.component.ts","webpack:///./src/app/add-salary-dialog/add-salary-dialog.component.html","webpack:///./src/app/add-salary-dialog/add-salary-dialog.component.scss","webpack:///./src/app/add-salary-dialog/add-salary-dialog.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/data-table/data-table-datasource.ts","webpack:///./src/app/data-table/data-table.component.html","webpack:///./src/app/data-table/data-table.component.scss","webpack:///./src/app/data-table/data-table.component.ts","webpack:///./src/app/data.service.ts","webpack:///./src/app/details/details.component.html","webpack:///./src/app/details/details.component.scss","webpack:///./src/app/details/details.component.ts","webpack:///./src/app/employee-form/employee-form.component.html","webpack:///./src/app/employee-form/employee-form.component.scss","webpack:///./src/app/employee-form/employee-form.component.ts","webpack:///./src/app/employees/employees.component.html","webpack:///./src/app/employees/employees.component.scss","webpack:///./src/app/employees/employees.component.ts","webpack:///./src/app/models/employee.ts","webpack:///./src/app/models/yearSalary.ts","webpack:///./src/app/posts/posts.component.html","webpack:///./src/app/posts/posts.component.scss","webpack:///./src/app/posts/posts.component.ts","webpack:///./src/app/searchHelper.ts","webpack:///./src/app/sidebar/sidebar.component.html","webpack:///./src/app/sidebar/sidebar.component.scss","webpack:///./src/app/sidebar/sidebar.component.ts","webpack:///./src/app/sorter.ts","webpack:///./src/app/table-salary/table-salary-datasource.ts","webpack:///./src/app/table-salary/table-salary.component.html","webpack:///./src/app/table-salary/table-salary.component.scss","webpack:///./src/app/table-salary/table-salary.component.ts","webpack:///./src/app/users/users.component.html","webpack:///./src/app/users/users.component.scss","webpack:///./src/app/users/users.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<div *ngIf=\\\"employee\\\">\\n\\n  <h1>Add Employee</h1>\\n\\n  <app-employee-form [employee]=\\\"employee\\\" [isAddingMode]=\\\"true\\\"></app-employee-form>\\n  \\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { Employee } from '../models/employee';\n\n@Component({\n  selector: 'app-add-employee',\n  templateUrl: './add-employee.component.html',\n  styleUrls: ['./add-employee.component.scss']\n})\nexport class AddEmployeeComponent implements OnInit {\n\n  employee: Employee = new Employee();\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<div class=\\\"container\\\">\\n    <h3 mat-dialog-title>Add Year salary</h3>\\n  \\n    <form class=\\\"mat-dialog-content\\\" (ngSubmit)=\\\"onSubmit\\\" #formControl=\\\"ngForm\\\">\\n  \\n      <div class=\\\"form\\\">\\n        <mat-form-field color=\\\"accent\\\">\\n          <input matInput #input class=\\\"form-control\\\" placeholder=\\\"Year\\\" [(ngModel)]=\\\"data.year\\\" name=\\\"year\\\" required>\\n          <mat-error *ngIf=\\\"formControl.invalid\\\">{{getErrorMessage()}}</mat-error>\\n        </mat-form-field>\\n      </div>\\n  \\n      <!--Textarea for demo purposes-->\\n      <div class=\\\"form\\\">\\n        <mat-form-field color=\\\"accent\\\">\\n          <textarea matInput #input class=\\\"form-control\\\" placeholder=\\\"January\\\" [(ngModel)]=\\\"data.jan\\\" name=\\\"jan\\\" required></textarea>\\n          <mat-error *ngIf=\\\"formControl.invalid\\\">{{getErrorMessage()}}</mat-error>\\n        </mat-form-field>\\n      </div>\\n  \\n      <!--Contains mat-hint for characters count and has maxLengt set-->\\n      <div class=\\\"form\\\">\\n        <mat-form-field color=\\\"accent\\\">\\n          <input matInput #inputstate class=\\\"form-control\\\" placeholder=\\\"February\\\" [(ngModel)]=\\\"data.feb\\\" name=\\\"feb\\\" maxlength=\\\"10\\\" required>\\n          <mat-error *ngIf=\\\"formControl.invalid\\\">{{getErrorMessage()}}</mat-error>\\n          <mat-hint align=\\\"end\\\">{{inputstate.value?.length || 0}}/10</mat-hint>\\n        </mat-form-field>\\n      </div>\\n  \\n      <div class=\\\"form\\\">\\n        <mat-form-field color=\\\"accent\\\">\\n          <input matInput placeholder=\\\"March\\\" [(ngModel)]=\\\"data.mar\\\" name=\\\"mar\\\">\\n        </mat-form-field>\\n      </div>\\n  \\n      <div class=\\\"form\\\">\\n        <mat-form-field color=\\\"accent\\\">\\n          <input matInput placeholder=\\\"April\\\" [(ngModel)]=\\\"data.apr\\\" name=\\\"apr\\\">\\n        </mat-form-field>\\n      </div>\\n  \\n      <div class=\\\"form\\\">\\n        <mat-form-field color=\\\"accent\\\">\\n          <input matInput placeholder=\\\"May\\\" [(ngModel)]=\\\"data.may\\\" name=\\\"may\\\">\\n        </mat-form-field>\\n      </div>\\n  \\n      <div mat-dialog-actions>\\n        <button mat-button [type]=\\\"submit\\\" [disabled]=\\\"!formControl.valid\\\" [mat-dialog-close]=\\\"1\\\" (click)=\\\"confirmAdd()\\\">Save</button>\\n        <button mat-button (click)=\\\"onNoClick()\\\" tabindex=\\\"-1\\\">Cancel</button>\\n      </div>\\n    </form>\\n  </div>\"","module.exports = \".container {\\n  display: flex;\\n  flex-direction: column;\\n  min-width: 450px; }\\n\\n.container > * {\\n  width: 100%; }\\n\\n.form {\\n  display: flex;\\n  padding-top: 6px; }\\n\\n.mat-form-field {\\n  font-size: 16px;\\n  flex-grow: 1; }\\n\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { YearSalary } from '../models/yearSalary';\nimport { DataService } from '../data.service';\nimport { FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-add-salary-dialog',\n  templateUrl: './add-salary-dialog.component.html',\n  styleUrls: ['./add-salary-dialog.component.scss']\n})\nexport class AddSalaryDialogComponent implements OnInit {\n\n  constructor(public dialogRef: MatDialogRef<AddSalaryDialogComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: YearSalary,\n              public dataService: DataService) { }\n\n  ngOnInit() { }\n\n  formControl = new FormControl('', [\n    Validators.required,\n    Validators.email\n  ]);\n\n  getErrorMessage() {\n    return this.formControl.hasError('required') ? 'Required field' :\n      this.formControl.hasError('email') ? 'Not a valid email' :\n        '';\n  }\n\n  onSubmit() {\n    // empty stuff\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  public confirmAdd(): void {\n    console.log(this.data);\n    this.dataService.addYearSalary(this.data);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { DetailsComponent } from './details/details.component';\nimport { PostsComponent } from './posts/posts.component';\nimport { EmployeesComponent } from './employees/employees.component';\nimport { AddEmployeeComponent } from './add-employee/add-employee.component'\n\nconst routes: Routes = [\n  { path: '', component: EmployeesComponent },\n  { path: 'details/:id', component: DetailsComponent },\n  { path: 'posts', component: PostsComponent },\n  { path: 'add', component: AddEmployeeComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"<div id=\\\"container\\\">\\n  <app-sidebar></app-sidebar>\\n\\n  <div id=\\\"content\\\">\\n    <router-outlet></router-outlet>\\n  </div>\\n</div>\"","module.exports = \"\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'employees';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'; // <- NgModel lives here\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { SidebarComponent } from './sidebar/sidebar.component';\nimport { PostsComponent } from './posts/posts.component';\nimport { UsersComponent } from './users/users.component';\nimport { DetailsComponent } from './details/details.component';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { EmployeesComponent } from './employees/employees.component';\nimport { TableSalaryComponent } from './table-salary/table-salary.component';\nimport { MatTableModule, MatPaginatorModule, MatSortModule, \n  MatButtonModule, MatDialogModule, MatIconModule, MatInputModule,\n  MatFormFieldModule } from '@angular/material';\nimport { DataTableComponent } from './data-table/data-table.component';\nimport { EmployeeFormComponent } from './employee-form/employee-form.component';\nimport { AddEmployeeComponent } from './add-employee/add-employee.component';\nimport { AddSalaryDialogComponent } from './add-salary-dialog/add-salary-dialog.component';\n\nimport { DataTablesModule } from 'angular-datatables';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SidebarComponent,\n    PostsComponent,\n    UsersComponent,\n    DetailsComponent,\n    EmployeesComponent,\n    TableSalaryComponent,\n    DataTableComponent,\n    EmployeeFormComponent,\n    AddEmployeeComponent,\n    AddSalaryDialogComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    MatInputModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    DataTablesModule\n  ],\n  entryComponents: [\n    AddSalaryDialogComponent\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { DataSource } from '@angular/cdk/collections';\r\nimport { MatPaginator, MatSort } from '@angular/material';\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable, of as observableOf, merge, BehaviorSubject } from 'rxjs';\r\nimport { ITableDataItem } from '../ITableDataItem';\r\nimport { Sorter } from '../sorter';\r\nimport { SearchHelper } from '../searchHelper';\r\n\r\n  /**\r\n   * Data source for the TableSalary view. This class should\r\n   * encapsulate all logic for fetching and manipulating the displayed data\r\n   * (including sorting, pagination, and filtering).\r\n   */\r\n  export class DataTableSource extends DataSource<ITableDataItem> {\r\n  \r\n    filterChange = new BehaviorSubject('');\r\n\r\n    get filter(): string {\r\n      return this.filterChange.value;\r\n    }\r\n  \r\n    set filter(filter: string) {\r\n      this.filterChange.next(filter);\r\n    }\r\n\r\n    filteredData: ITableDataItem[] = [];\r\n    renderedData: ITableDataItem[] = [];\r\n\r\n    constructor(private paginator: MatPaginator, private sort: MatSort, private data: ITableDataItem[]) {\r\n      super();\r\n      console.log(this.data);\r\n      // Reset to the first page when the user changes the filter.\r\n      this.filterChange.subscribe(() => this.paginator.pageIndex = 0);\r\n    }\r\n  \r\n    /**\r\n     * Connect this data source to the table. The table will only update when\r\n     * the returned stream emits new items.\r\n     * @returns A stream of the items to be rendered.\r\n     */\r\n    connect(): Observable<ITableDataItem[]> {\r\n      // Listen for any changes in the base data, sorting, filtering, or pagination\r\n      // Combine everything that affects the rendered data into one update\r\n      // stream for the data-table to consume.\r\n      const dataMutations = [\r\n        observableOf(this.data),\r\n        this.paginator.page,\r\n        this.sort.sortChange,\r\n        this.filterChange\r\n      ];\r\n  \r\n      // // Set the paginators length\r\n      // this.paginator.length = this.data.length;\r\n      \r\n  \r\n      return merge(...dataMutations).pipe(map(() => {\r\n        // Filter data\r\n        this.filteredData = this.data.slice().filter((item: ITableDataItem) => {\r\n          const searchStr = SearchHelper.getSearchStringForEmployee(item).toLowerCase();\r\n          return searchStr.indexOf(this.filter.toLowerCase()) !== -1;\r\n        });\r\n\r\n        // Sort filtered data\r\n        const sortedData = this.getSortedData(this.filteredData.slice());\r\n\r\n        // Grab the page's slice of the filtered sorted data.\r\n        return this.getPagedData(this.getSortedData([...sortedData]));\r\n      }));\r\n    }\r\n  \r\n    /**\r\n     *  Called when the table is being destroyed. Use this function, to clean up\r\n     * any open connections or free any held resources that were set up during connect.\r\n     */\r\n    disconnect() {}\r\n  \r\n    /**\r\n     * Paginate the data (client-side).\r\n     */\r\n    private getPagedData(data: ITableDataItem[]) {\r\n      const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\r\n      this.renderedData = data.splice(startIndex, this.paginator.pageSize);\r\n      return this.renderedData;\r\n    }\r\n  \r\n    /**\r\n     * Sort the data (client-side).\r\n     */\r\n    private getSortedData(data) {\r\n      return Sorter.sort(this.sort, data);\r\n    }\r\n  }\r\n  \r\n  \r\n  ","module.exports = \"<div class=\\\"mat-elevation-z8\\\">\\n\\n  <div class=\\\"form\\\">\\n      <mat-form-field floatPlaceholder=\\\"never\\\" color=\\\"primary\\\">\\n        <input matInput #filter placeholder=\\\"Filter\\\">\\n      </mat-form-field>\\n  </div>\\n\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort>\\n\\n  <!--- Note that these columns can be defined in any order.\\n        The actual rendered columns are set as a property on the row definition\\\" -->\\n\\n    <ng-container matColumnDef=\\\"year\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Year</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.year }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"jan\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Jan</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.jan }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"feb\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Feb</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.feb }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"mar\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Mar</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.mar }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"apr\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Apr</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.apr }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"may\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>May</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.may }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"jun\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Jun</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.jun }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"jul\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Jul</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.jul }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"aug\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Aug</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.aug }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"sep\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Sep</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.sep }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"okt\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Okt</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{row.okt}}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"nov\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Nov</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{ row.nov }}</td>\\n      </ng-container>\\n\\n    <ng-container matColumnDef=\\\"dec\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Dec</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{row.dec}}</td>\\n    </ng-container>\\n\\n    <!-- actions -->\\n\\n    <ng-container matColumnDef=\\\"actions\\\">\\n      <mat-header-cell *matHeaderCellDef>\\n        <button mat-icon-button color=\\\"primary\\\" (click)=\\\"addNew()\\\">\\n          <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\">add</mat-icon>\\n        </button>\\n      </mat-header-cell>\\n\\n      <mat-cell *matCellDef=\\\"let row; let i=index;\\\">\\n        <button mat-icon-button color=\\\"primary\\\" (click)=\\\"startEdit(i, row.id, row.title, row.state, row.url, row.created_at, row.updated_at)\\\">\\n          <mat-icon aria-label=\\\"Edit\\\">edit</mat-icon>\\n        </button>\\n\\n        <button mat-icon-button color=\\\"primary\\\" (click)=\\\"deleteItem(i, row.id, row.title, row.state, row.url)\\\">\\n          <mat-icon aria-label=\\\"Delete\\\">delete</mat-icon>\\n        </button>\\n      </mat-cell>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n  <div class=\\\"no-results\\\" [style.display]=\\\"dataSource.renderedData.length == 0 ? '' : 'none'\\\">\\n    No results\\n  </div>\\n\\n  <!-- [length]=\\\"dataSource.filteredData.length\\\" -->\\n  <mat-paginator #paginator\\n    [length]=\\\"dataSource.data.length\\\"\\n    [pageIndex]=\\\"0\\\"\\n    [pageSize]=\\\"10\\\"\\n    [pageSizeOptions]=\\\"[1, 5, 10, 25, 50]\\\">\\n  </mat-paginator>\\n</div>\\n\\n\\n\"","module.exports = \"table {\\n  width: 100%; }\\n\\n/* Filter */\\n\\n.form {\\n  min-height: 56px;\\n  max-height: 56px;\\n  display: flex;\\n  align-items: center;\\n  padding: 8px 24px 0;\\n  font-size: 20px;\\n  justify-content: space-between;\\n  border-bottom: 1px solid transparent; }\\n\\n.mat-form-field {\\n  font-size: 14px;\\n  flex-grow: 1;\\n  margin-top: 8px; }\\n\\n/* Mat table */\\n\\n.no-results {\\n  display: flex;\\n  justify-content: center;\\n  padding: 14px;\\n  font-size: 14px;\\n  font-style: italic; }\\n\"","import { Component, OnInit, ViewChild, Input, ElementRef } from '@angular/core';\nimport { MatPaginator, MatSort, MatDialog } from '@angular/material';\nimport { DataTableSource } from './data-table-datasource';\nimport { ITableDataItem } from '../ITableDataItem';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport { AddSalaryDialogComponent } from '../add-salary-dialog/add-salary-dialog.component';\nimport { DataService } from '../data.service';\nimport { YearSalary } from '../models/yearSalary';\n\n\n/**\n * @title Basic use of `<table mat-table>`\n */\n@Component({\n  selector: 'app-data-table',\n  templateUrl: './data-table.component.html',\n  styleUrls: ['./data-table.component.scss'],\n})\nexport class DataTableComponent implements OnInit {\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild('filter') filter: ElementRef;\n  dataSource: DataTableSource;\n  @Input() source: ITableDataItem[];\n\n\n  /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\n  displayedColumns = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'okt', 'nov', 'dec', 'actions'];\n\n  ngOnInit() {\n    this.loadData();\n  }\n\n  refresh() {\n    this.loadData();\n  }\n\n  constructor(public dialog: MatDialog, private data: DataService) {}\n\n  addNew(salary: YearSalary) {\n    const dialogRef = this.dialog.open(AddSalaryDialogComponent, {\n      data: {salary: salary}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result === 1) {\n        // After dialog is closed we're doing frontend updates\n        // For add we're just pushing a new row inside DataService\n        this.source.push(this.data.getDialogData());\n        this.refreshTable();\n      }\n    });\n  }\n\n  private refreshTable() {\n    // if there's a paginator active we're using it for refresh\n    if (this.paginator.hasNextPage()) {\n      this.paginator.nextPage();\n      this.paginator.previousPage();\n      // in case we're on last page this if will tick\n    } else if (this.paginator.hasPreviousPage()) {\n      this.paginator.previousPage();\n      this.paginator.nextPage();\n      // in all other cases including active filter we do it like this\n    } else {\n      this.dataSource.filter = '';\n      this.dataSource.filter = this.filter.nativeElement.value;\n    }\n  }\n\n  public loadData() {\n    this.dataSource = new DataTableSource(this.paginator, this.sort, this.source);\n    fromEvent(this.filter.nativeElement, 'keyup')\n    .pipe(\n      debounceTime(150),\n      distinctUntilChanged(),\n    ).subscribe(() => {\n        if (!this.dataSource) {\n          return;\n        }\n        this.dataSource.filter = this.filter.nativeElement.value;\n      });\n  }\n\n\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, BehaviorSubject } from 'rxjs';\nimport { Employee } from './models/employee';\nimport { tap, catchError, map } from 'rxjs/operators';\nimport { environment } from '../environments/environment';\nimport { YearSalary } from './models/yearSalary';\nimport { ITableDataItem } from './ITableDataItem';\n\nconst HTTP_OPTIONS = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  private baseUrl = environment.ApiBaseUrl;\n  private employeesUrl = this.baseUrl + 'api/Employees';\n\n  dataChange: BehaviorSubject<ITableDataItem[]> = new BehaviorSubject<ITableDataItem[]>([]);\n  // Temporarily stores data from dialogs\n  dialogData: ITableDataItem;\n\n  constructor(private http: HttpClient) { }\n\n  /**\n   * GET employees from the server\n   */\n  getEmployees(): Observable<Employee[]> {\n    return this.http.get<Employee[]>(this.employeesUrl)\n      .pipe(\n        map(data => {\n          this.log('fetched employees');\n          return data;\n        }),\n        catchError(this.handleError('getEmployees', []))\n      );\n  }\n\n  /**\n   * GET employee from the server\n   * @param employeeId \n   */\n  getEmployee(employeeId): Observable<Employee> {\n    return this.http.get<Employee>(`${this.employeesUrl}/${employeeId}`)\n      .pipe(\n        map(data => {\n          return data;\n        }),\n        catchError(this.handleError<Employee>(`getHero id=${employeeId}`))\n      );\n  }\n\n  /**\n   * PUSH new employee to server\n   */\n  addEmployee(employee: Employee) {\n    return this.http.post<Employee>(this.employeesUrl, employee, HTTP_OPTIONS)\n      .pipe(\n        tap((employee: Employee) => this.log(`added employee w/ id=${employee.id}`)),\n        catchError(this.handleError<Employee>(`addEmployee id=${employee.id}`))\n      );\n  }\n\n  /**\n   * PUT the employee to the server\n   * @param employee \n   */\n  updateEmployee(employee: Employee) {\n    return this.http.put(`${this.employeesUrl}/${employee.id}`, employee, HTTP_OPTIONS)\n      .pipe(\n        tap(_ => this.log(`updated employee id=${employee.id}`)),\n        catchError(this.handleError<any>(`updateEmployee id=${employee.id}`))\n    );\n  }\n   /**\n    * DELETE employee with this id\n    */\n  deleteEmployee(employee: Employee | number): Observable<Employee> {\n    const id = typeof employee === 'number' ? employee : employee.id;\n\n    return this.http.delete<Employee>(`${this.employeesUrl}/${id}`, HTTP_OPTIONS).pipe(\n      tap(_ => this.log(`deleted employee id=${id}`)),\n      catchError(this.handleError<Employee>(`deleteEmployee id=${id}`))\n    );\n  }\n\n  /**\n   * to get data from dialog after it was submitted\n   */\n  getDialogData() {\n    return this.dialogData;\n  }\n\n  /**\n   * PUSH new YearSalary for Employee according to id\n   * sets dialogData to new item\n   */\n  addYearSalary(yearSalary: YearSalary) {\n    //TODO\n    console.log(\"service addYearSalary()\" + yearSalary);\n    this.dialogData = yearSalary;\n  }\n\n  getPosts(): Observable<Object> {\n    return this.http.get('https://jsonplaceholder.typicode.com/posts');\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T> (operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  private log(message: string) {\n    console.log(`DataService: ${message}`);\n  }\n  \n}\n","module.exports = \"<div *ngIf=\\\"employee$\\\">\\n  <h1>Edit Employee</h1>\\n\\n  <app-employee-form [employee]=\\\"employee$\\\" [isAddingMode]=\\\"false\\\"></app-employee-form>\\n\\n  <h2>Salaries</h2>\\n\\n  <div *ngIf=\\\"employee$.salaries !== undefined\\\">\\n    <app-data-table [source]=\\\"employee$.salaries\\\"></app-data-table>\\n  </div>\\n  \\n  <div *ngIf=\\\"employee$.salaries === undefined\\\">\\n    No Salaries for {{ employee$.name }}\\n  </div>\\n  \\n</div>\\n  \\n\\n\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { DataService } from '../data.service';\nimport { ActivatedRoute } from '@angular/router'\nimport { Employee } from '../models/employee';\nimport { YearSalary } from '../models/yearSalary';\n\n@Component({\n  selector: 'app-details',\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.component.scss']\n})\nexport class DetailsComponent implements OnInit {\n\n  employee$: Employee = new Employee();\n  isEditMode = false;\n\n  constructor(\n    private data: DataService, \n    private route: ActivatedRoute) {\n      this.route.params.subscribe(params => this.employee$.id = params.id);\n  }\n\n  ngOnInit() {\n    this.data.getEmployee(this.employee$.id).subscribe(data => {\n      console.log(data.constructor.name);\n      this.employee$ = data;\n      console.log(this.employee$);\n      console.log(this.employee$.constructor.name);\n    });\n    \n  }\n\n}\n","module.exports = \"<form (ngSubmit)=\\\"onSubmit()\\\" #employeeForm=\\\"ngForm\\\">\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"name\\\">Name</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"name\\\" required\\n      [(ngModel)]=\\\"employee.name\\\" name=\\\"name\\\" #name=\\\"ngModel\\\">\\n    <div [hidden]=\\\"name.valid || name.pristine\\\"\\n      class=\\\"alert alert-danger\\\">\\n        Name is required\\n    </div>\\n  </div>\\n\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"email\\\">Email</label>\\n    <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" required\\n      [(ngModel)]=\\\"employee.email\\\" name=\\\"email\\\" #email=\\\"ngModel\\\">\\n    <div [hidden]=\\\"email.valid || email.pristine\\\"\\n      class=\\\"alert alert-danger\\\">\\n        Email is required\\n    </div>\\n  </div>\\n\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"phone\\\">Phone</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"phone\\\" required\\n      [(ngModel)]=\\\"employee.phone\\\" name=\\\"phone\\\" #phone=\\\"ngModel\\\">\\n    <div [hidden]=\\\"phone.valid || phone.pristine\\\"\\n      class=\\\"alert alert-danger\\\">\\n        Phone is required\\n    </div>\\n  </div>\\n\\n  <button type=\\\"button\\\" class=\\\"btn btn-link\\\" (click)=\\\"onBack()\\\">Back</button>\\n  <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" [disabled]=\\\"!employeeForm.form.valid\\\">Save</button>\\n\\n</form>\"","module.exports = \".ng-valid[required], .ng-valid.required {\\n  border-left: 5px solid #42A948;\\n  /* green */ }\\n\\n.ng-invalid:not(form) {\\n  border-left: 5px solid #a94442;\\n  /* red */ }\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { Employee } from '../models/employee';\nimport { DataService } from '../data.service';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-employee-form',\n  templateUrl: './employee-form.component.html',\n  styleUrls: ['./employee-form.component.scss']\n})\nexport class EmployeeFormComponent implements OnInit {\n\n  @Input() employee: Employee;\n  @Input() isAddingMode: boolean;\n\n  constructor(private data: DataService, private location: Location) { }\n\n  ngOnInit() {\n  }\n\n  /**\n   * adds or edits employee according to isAddingMode value set by parent component\n   */\n  onSubmit() {\n    if (this.isAddingMode) {\n      this.data.addEmployee(this.employee)\n      .subscribe(\n        () => {\n          console.log(\"Employee added\");\n          this.location.back();\n        },\n        () => { console.log(\"Failed to add employee\") }\n      );\n    } else {\n      this.data.updateEmployee(this.employee)\n      .subscribe(\n        () => {\n          console.log(\"Employee updated\");\n          this.location.back();\n        },\n        () => { console.log(\"Failed to update employee\") }\n      );\n    }\n    \n  }\n\n  onBack() {\n    this.location.back();\n  }\n\n}\n","module.exports = \"<h1>\\n  Employees\\n  <a routerLink=\\\"/add\\\">\\n    <i class=\\\"material-icons right\\\">add_circle</i>\\n  </a>\\n</h1>\\n\\n<ul>\\n  <li *ngFor=\\\"let employee of employees$\\\">\\n    <span>\\n      <a routerLink=\\\"/details/{{ employee.id }}\\\">{{ employee.name }}</a>\\n      <i class=\\\"material-icons right\\\" (click)=\\\"onDeleteClicked(employee)\\\">delete</i>\\n    </span>\\n    <ul>\\n      <li>{{ employee.email }}</li>\\n      <li>{{ employee.phone }}</li>\\n    </ul>\\n  </li>\\n</ul>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { DataService } from '../data.service';\nimport { Employee } from '../models/employee';\n\n@Component({\n  selector: 'app-employees',\n  templateUrl: './employees.component.html',\n  styleUrls: ['./employees.component.scss']\n})\nexport class EmployeesComponent implements OnInit {\n\n  // $ is convention for async object instances\n  employees$: Employee[];\n\n  constructor(private data: DataService) { }\n\n  ngOnInit() {\n    console.log(\"employees ngOnInit() called\");\n    this.data.getEmployees().subscribe(data => this.employees$ = data);\n  }\n\n  onDeleteClicked(employee: Employee) {\n    if(confirm(\"Are you sure you want to delete this employee?\")) {\n      this.employees$ = this.employees$.filter(e => e !== employee);\n      this.data.deleteEmployee(employee.id).subscribe();\n    }\n  }\n\n}\n","import { YearSalary } from \"./yearSalary\";\r\nimport { ITableDataItem } from \"../ITableDataItem\";\r\n\r\nexport class Employee implements ITableDataItem {\r\n    id: number;\r\n    name: string;\r\n    email: string;\r\n    phone: string;\r\n    salaries: YearSalary[] | undefined;\r\n    \r\n    getSearchString(): string {\r\n        console.log(\"getSearchString() from Employee\");\r\n        return this.name + this.email + this.phone;\r\n    }\r\n}","import { ITableDataItem } from \"../ITableDataItem\";\r\n\r\nexport class YearSalary implements ITableDataItem {\r\n    \r\n\r\n\r\n    //which year it is\r\n    year: number;\r\n\r\n    //salaries for each month in this year\r\n    jan: number;\r\n    feb: number;\r\n    mar: number;\r\n    apr: number;\r\n    may: number;\r\n    jun: number;\r\n    jul: number;\r\n    aug: number;\r\n    sep: number;\r\n    okt: number;\r\n    nov: number;\r\n    dec: number;\r\n    \r\n    getSearchString() {\r\n        console.log(\"getSearchString() from YearSalary\");\r\n        return this.year + \r\n            \" \" + this.jan +\r\n            \" \" + this.feb +\r\n            \" \" + this.mar +\r\n            \" \" + this.apr +\r\n            \" \" + this.may +\r\n            \" \" + this.jun +\r\n            \" \" + this.jul +\r\n            \" \" + this.aug +\r\n            \" \" + this.sep +\r\n            \" \" + this.okt +\r\n            \" \" + this.nov +\r\n            \" \" + this.dec;\r\n    }\r\n}","module.exports = \"<h1>Posts</h1>\\n\\n<ul>\\n  <li *ngFor=\\\"let post of posts$\\\">\\n    <a>{{ post.title }}</a>\\n    <p>{{ post.body }}</p>\\n  </li>\\n</ul>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { DataService } from '../data.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-posts',\n  templateUrl: './posts.component.html',\n  styleUrls: ['./posts.component.scss']\n})\nexport class PostsComponent implements OnInit {\n\n  posts$: Object;\n\n  constructor(private data: DataService) { }\n\n  ngOnInit() {\n    this.data.getPosts().subscribe(data => this.posts$ = data);\n  }\n\n}\n","export class SearchHelper {\r\n    static getSearchStringForEmployee(emp: any): string {\r\n        //TOOD\r\n        var s = emp.year;\r\n        console.log(\"search string for employee = \" + s);\r\n        return s;\r\n    }\r\n\r\n    static getSearchStringForYearSalary(sal: any): string {\r\n        //TOOD\r\n        var s = sal.id + sal.name + sal.email + sal.year;\r\n        console.log(\"search string for year salary = \" + s);\r\n        return s;\r\n    }\r\n\r\n\r\n} ","module.exports = \"<nav>\\n  <ul>\\n    <li>\\n      <a routerLink=\\\"\\\" [class.activated]=\\\"currentUrl == '/'\\\">\\n        <i class=\\\"material-icons\\\">supervised_user_circle</i>\\n      </a>\\n    </li>\\n    <li>\\n      <a routerLink=\\\"posts\\\" [class.activated]=\\\"currentUrl == '/posts'\\\">\\n        <i class=\\\"material-icons\\\">trending_up</i>\\n      </a>\\n    </li>\\n  </ul>\\n</nav>\"","module.exports = \"nav {\\n  background: #2D2E2E;\\n  height: 100%; }\\n  nav ul {\\n    list-style-type: none;\\n    padding: 0;\\n    margin: 0; }\\n  nav ul li a {\\n      color: #fff;\\n      padding: 20px;\\n      display: block; }\\n  nav ul li .activated {\\n      background-color: #00a8ff; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Router, NavigationEnd } from '@angular/router';\n\n@Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.scss']\n})\nexport class SidebarComponent implements OnInit {\n\n  currentUrl: string;\n\n  constructor(private router: Router) {\n    router.events.subscribe(_ => {\n      if (_ instanceof NavigationEnd) {\n        this.currentUrl = _.url;\n      }\n    });\n  }\n\n  ngOnInit() {}\n\n}","import { MatSort } from \"@angular/material\";\r\n\r\nexport class Sorter {\r\n    static sort(sort: MatSort, data) {\r\n        if (!sort.active || sort.direction === '') {\r\n            return data;\r\n        }\r\n        \r\n        return data.sort((a, b) => {\r\n            const isAsc = sort.direction === 'asc';\r\n            switch (sort.active) {\r\n                case 'year': return this.compare(+a.year, +b.year, isAsc);\r\n                case 'jan': return this.compare(+a.jan, +b.jan, isAsc);\r\n                case 'feb': return this.compare(+a.feb, +b.feb, isAsc);\r\n                case 'mar': return this.compare(+a.mar, +b.mar, isAsc);\r\n                case 'apr': return this.compare(+a.apr, +b.apr, isAsc);\r\n                case 'jun': return this.compare(+a.jun, +b.jun, isAsc);\r\n                case 'jul': return this.compare(+a.jul, +b.jul, isAsc);\r\n                case 'aug': return this.compare(+a.aug, +b.aug, isAsc);\r\n                case 'sep': return this.compare(+a.sep, +b.sep, isAsc);\r\n                case 'okt': return this.compare(+a.okt, +b.okt, isAsc);\r\n                case 'nov': return this.compare(+a.nov, +b.nov, isAsc);\r\n                case 'dec': return this.compare(+a.dec, +b.dec, isAsc);\r\n                default: return 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Simple sort comparator for example ID/Name columns (for client-side sorting). */\r\n    static compare(a, b, isAsc) {\r\n        return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\r\n    }\r\n}","import { DataSource } from '@angular/cdk/collections';\nimport { MatPaginator, MatSort } from '@angular/material';\nimport { map } from 'rxjs/operators';\nimport { Observable, of as observableOf, merge } from 'rxjs';\n\n// TODO: Replace this with your own data model type\nexport interface TableSalaryItem {\n  year: number,\n  jan: number,\n  feb: number,\n  mar: number,\n  apr: number,\n  may: number,\n  jun: number,\n  jul: number,\n  aug: number,\n  sep: number,\n  okt: number,\n  nov: number,\n  dec: number\n}\n\n// TODO: replace this with real data from your application\nconst EXAMPLE_DATA: TableSalaryItem[] = [\n  { \n    year: 2013,\n    jan: 123,\n    feb: 456,\n    mar: 759,\n    apr: 147,\n    may: 258,\n    jun: 369,\n    jul: 753,\n    aug: 159,\n    sep: 125,\n    okt: 456,\n    nov: 453,\n    dec: 489\n  },\n  { \n    year: 2014,\n    jan: 123,\n    feb: 456,\n    mar: 4129,\n    apr: 147,\n    may: 258,\n    jun: 369,\n    jul: 753,\n    aug: 159,\n    sep: 125,\n    okt: 456,\n    nov: 453,\n    dec: 489\n  },\n  { \n    year: 2015,\n    jan: 123,\n    feb: 456,\n    mar: 789123,\n    apr: 147,\n    may: 258,\n    jun: 369,\n    jul: 753,\n    aug: 159,\n    sep: 125,\n    okt: 456,\n    nov: 453,\n    dec: 489\n  },\n  { \n    year: 2016,\n    jan: 123,\n    feb: 456,\n    mar: 789753,\n    apr: 147,\n    may: 258,\n    jun: 369,\n    jul: 753,\n    aug: 159,\n    sep: 125,\n    okt: 456,\n    nov: 453,\n    dec: 489\n  },\n  { \n    year: 2017,\n    jan: 123,\n    feb: 456,\n    mar: 789,\n    apr: 147,\n    may: 258,\n    jun: 369,\n    jul: 753,\n    aug: 159,\n    sep: 125,\n    okt: 456,\n    nov: 453,\n    dec: 489\n  }\n];\n\n/**\n * Data source for the TableSalary view. This class should\n * encapsulate all logic for fetching and manipulating the displayed data\n * (including sorting, pagination, and filtering).\n */\nexport class TableSalaryDataSource extends DataSource<TableSalaryItem> {\n  data: TableSalaryItem[] = EXAMPLE_DATA;\n\n  constructor(private paginator: MatPaginator, private sort: MatSort) {\n    super();\n  }\n\n  /**\n   * Connect this data source to the table. The table will only update when\n   * the returned stream emits new items.\n   * @returns A stream of the items to be rendered.\n   */\n  connect(): Observable<TableSalaryItem[]> {\n    // Combine everything that affects the rendered data into one update\n    // stream for the data-table to consume.\n    const dataMutations = [\n      observableOf(this.data),\n      this.paginator.page,\n      this.sort.sortChange\n    ];\n\n    // Set the paginators length\n    this.paginator.length = this.data.length;\n\n    return merge(...dataMutations).pipe(map(() => {\n      return this.getPagedData(this.getSortedData([...this.data]));\n    }));\n  }\n\n  /**\n   *  Called when the table is being destroyed. Use this function, to clean up\n   * any open connections or free any held resources that were set up during connect.\n   */\n  disconnect() {}\n\n  /**\n   * Paginate the data (client-side). If you're using server-side pagination,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getPagedData(data: TableSalaryItem[]) {\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Sort the data (client-side). If you're using server-side sorting,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getSortedData(data: TableSalaryItem[]) {\n    if (!this.sort.active || this.sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      const isAsc = this.sort.direction === 'asc';\n      switch (this.sort.active) {\n        case 'year': return compare(+a.year, +b.year, isAsc);\n        case 'jan': return compare(+a.jan, +b.jan, isAsc);\n        case 'feb': return compare(+a.feb, +b.feb, isAsc);\n        case 'mar': return compare(+a.mar, +b.mar, isAsc);\n        case 'apr': return compare(+a.apr, +b.apr, isAsc);\n        case 'jun': return compare(+a.jun, +b.jun, isAsc);\n        case 'jul': return compare(+a.jul, +b.jul, isAsc);\n        case 'aug': return compare(+a.aug, +b.aug, isAsc);\n        case 'sep': return compare(+a.sep, +b.sep, isAsc);\n        case 'okt': return compare(+a.okt, +b.okt, isAsc);\n        case 'nov': return compare(+a.nov, +b.nov, isAsc);\n        case 'dec': return compare(+a.dec, +b.dec, isAsc);\n        default: return 0;\n      }\n    });\n  }\n}\n\n/** Simple sort comparator for example ID/Name columns (for client-side sorting). */\nfunction compare(a, b, isAsc) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n","module.exports = \"<div class=\\\"mat-elevation-z8 data-table\\\">\\n\\n  <table mat-table #table [dataSource]=\\\"dataSource\\\" matSort aria-label=\\\"Elements\\\">\\n    \\n    <!--- Note that these columns can be defined in any order.\\n        The actual rendered columns are set as a property on the row definition\\\" -->\\n\\n    <ng-container matColumnDef=\\\"year\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Year</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.year }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"jan\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Jan</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.jan }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"feb\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Feb</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.feb }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"mar\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Mar</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.mar }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"apr\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Apr</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.apr }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"may\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>May</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.may }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"jun\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Jun</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.jun }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"jul\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Jul</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.jul }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"aug\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Aug</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.aug }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"sep\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Sep</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{ row.sep }}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"okt\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Okt</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{row.okt}}</td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"nov\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Nov</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{ row.nov }}</td>\\n      </ng-container>\\n\\n    <ng-container matColumnDef=\\\"dec\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Dec</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{row.dec}}</td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n  <mat-paginator #paginator\\n    [length]=\\\"dataSource.data.length\\\"\\n    [pageIndex]=\\\"0\\\"\\n    [pageSize]=\\\"50\\\"\\n    [pageSizeOptions]=\\\"[1, 25, 50, 100, 250]\\\">\\n  </mat-paginator>\\n</div>\"","module.exports = \".data-table {\\n  width: 80%;\\n  margin: 20px auto; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator, MatSort } from '@angular/material';\nimport { TableSalaryDataSource } from './table-salary-datasource';\n\n@Component({\n  selector: 'app-table-salary',\n  templateUrl: './table-salary.component.html',\n  styleUrls: ['./table-salary.component.scss']\n})\nexport class TableSalaryComponent implements OnInit {\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  dataSource: TableSalaryDataSource;\n\n  /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\n  displayedColumns = ['year', 'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'okt', 'nov', 'dec'];\n\n  ngOnInit() {\n    this.dataSource = new TableSalaryDataSource(this.paginator, this.sort);\n  }\n}\n","module.exports = \"<h1>Employees</h1>\\n\\n<!--[@listStagger]=\\\"employees$\\\"-->\\n<ul>\\n  <li *ngFor=\\\"let employee of employees$\\\">\\n    <a routerLink=\\\"/details/{{ employee.id }}\\\">{{ employee.name }}</a>\\n    <ul>\\n      <li>{{ employee.email }}</li>\\n      <li>{{ employee.phone }}</li>\\n      <li>{{ employee.age }}</li>\\n      <li>{{ employee.birthday }}</li>\\n    </ul>\\n  </li>\\n</ul>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { DataService } from '../data.service';\nimport { trigger,style,transition,animate,keyframes,query,stagger } from '@angular/animations';\n\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.scss']\n  // ,\n  // animations: [\n  //   trigger('listStagger', [\n  //     // from any state to and any state back and forth\n  //     transition('* <=> *', [\n  //       query(':enter', \n  //       [\n  //         style({ opacity: 0, tranform: 'translateY(-15px)' }),\n  //         stagger('50ms', \n  //           animate('550ms ease-out',\n  //             style({ opacity: 1, transform: 'translateY(0px)'})))\n  //       ], { optional: true }),\n  //       query(':leave', animate('50ms', style({ opacity: 0 })), {\n  //         optional: true\n  //       })\n  //     ])\n  //   ])\n  // ]\n})\nexport class UsersComponent implements OnInit {\n\n  // $ is convention for async object instances\n  employees$: Object;\n\n  constructor(private data: DataService) { }\n\n  ngOnInit() {\n    this.data.getEmployees().subscribe(\n      data => this.employees$ = data\n    );\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  ApiBaseUrl: \"https://localhost:44302/\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}